<%= form_with model: order, local: true, class: "space-y-6" do |form| %>
  <% if order.errors.any? %>
    <div class="alert alert-error">
      <h4><%= pluralize(order.errors.count, "error") %> prohibited this order from being saved:</h4>
      <ul>
        <% order.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
    <!-- 基本情報 -->
    <div class="card bg-white shadow">
      <div class="card-body">
        <h2 class="card-title text-lg mb-4">基本情報</h2>
        
        <div class="form-control">
          <%= form.label :client, "クライアント", class: "label" %>
          <%= form.text_field :client, class: "input input-bordered w-full", required: true %>
        </div>

        <div class="form-control">
          <%= form.label :factory_name, "工場名", class: "label" %>
          <%= form.text_field :factory_name, class: "input input-bordered w-full", required: true %>
        </div>

        <div class="form-control">
          <%= form.label :order_date, "注文日", class: "label" %>
          <%= form.date_field :order_date, class: "input input-bordered w-full", required: true, value: order.order_date || Date.current %>
        </div>

        <div class="form-control">
          <%= form.label :shipping_date, "出荷予定日", class: "label" %>
          <%= form.date_field :shipping_date, class: "input input-bordered w-full" %>
        </div>

        <div class="form-control">
          <%= form.label :delivery_date, "納期", class: "label" %>
          <%= form.date_field :delivery_date, class: "input input-bordered w-full" %>
        </div>
      </div>
    </div>

    <!-- 担当者選択 -->
    <div class="card bg-white shadow">
      <div class="card-body">
        <h2 class="card-title text-lg mb-4">担当者</h2>
        
        <div class="form-control">
          <%= form.label :user_ids, "担当者を選択", class: "label" %>
          <div class="space-y-2 max-h-48 overflow-y-auto">
            <% users.each do |user| %>
              <label class="label cursor-pointer justify-start gap-3">
                <%= check_box_tag "order[user_ids][]", user.id, order.users.include?(user), 
                                  class: "checkbox checkbox-primary", 
                                  id: "order_user_ids_#{user.id}" %>
                <span class="label-text">
                  <%= user.full_name_kanji %> (<%= user.full_name_eng %>)
                </span>
              </label>
            <% end %>
          </div>
          <p class="text-sm text-gray-500 mt-2">複数の担当者を選択できます</p>
        </div>
      </div>
    </div>
  </div>

  <!-- 添付ファイル -->
  <div class="card bg-white shadow">
    <div class="card-body">
      <h2 class="card-title text-lg mb-4">添付ファイル</h2>
      
      <div class="space-y-4">
        <div class="form-control">
          <%= form.label :files, "ファイル", class: "label" %>
          
          <!-- Drag and Drop Area -->
          <div id="drop-zone" class="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-gray-400 transition-colors cursor-pointer relative">
            <svg class="mx-auto h-12 w-12 text-gray-400 pointer-events-none" stroke="currentColor" fill="none" viewBox="0 0 48 48">
              <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
            </svg>
            <p class="mt-2 text-sm text-gray-600 pointer-events-none">
              <span class="font-medium">クリックしてファイルを選択</span>
              またはここにファイルをドラッグ＆ドロップ
            </p>
            <p class="text-xs text-gray-500 mt-1 pointer-events-none">複数ファイルを選択できます（形式は問いません）</p>
            <%= form.file_field :files, class: "hidden", multiple: true, id: "file-input" %>
          </div>
          
          <!-- File Preview Area -->
          <div id="file-preview" class="mt-4 space-y-2">
            <!-- Debug info -->
            <div class="text-xs text-gray-400 border p-2 rounded">
              Debug: files.attached? = <%= order.files.attached? %>, 
              files.count = <%= order.files.attached? ? order.files.count : 0 %>
            </div>
            
            <% if order.files.attached? && order.files.any? %>
              <p class="text-sm font-medium text-gray-700">現在のファイル:</p>
              <% order.files.each do |file| %>
                <div class="existing-file flex items-center justify-between p-2 bg-gray-50 rounded">
                  <div class="flex items-center space-x-2">
                    <svg class="w-5 h-5 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                    </svg>
                    <span class="text-sm text-gray-600"><%= order.display_filename(file) %></span>
                  </div>
                  <span class="text-xs text-gray-500"><%= number_to_human_size(file.byte_size) %></span>
                </div>
              <% end %>
            <% end %>
            <div id="new-files-preview"></div>
          </div>
        </div>

        <div class="form-control">
          <%= form.label :attachment_urls, "関連URL", class: "label" %>
          <div id="url-fields">
            <% if order.attachment_urls.present? && order.attachment_urls.any? %>
              <% order.attachment_urls.each_with_index do |url, index| %>
                <div class="url-field flex gap-2 mb-2">
                  <%= text_field_tag "order[attachment_urls][]", url, 
                                     class: "input input-bordered flex-1", 
                                     placeholder: "https://example.com/document" %>
                  <button type="button" class="btn btn-error btn-sm remove-url">削除</button>
                </div>
              <% end %>
            <% else %>
              <div class="url-field flex gap-2 mb-2">
                <%= text_field_tag "order[attachment_urls][]", "", 
                                   class: "input input-bordered flex-1", 
                                   placeholder: "https://example.com/document" %>
                <button type="button" class="btn btn-error btn-sm remove-url">削除</button>
              </div>
            <% end %>
          </div>
          <button type="button" id="add-url" class="btn btn-sm btn-outline mt-2">URLを追加</button>
          <p class="text-sm text-gray-500 mt-1">関連ドキュメントやリソースへのリンクを入力してください</p>
        </div>
      </div>
    </div>
  </div>

  <!-- オーダーアイテム -->
  <div class="card bg-white shadow">
    <div class="card-body">
      <div class="flex justify-between items-center mb-4">
        <h2 class="card-title text-lg">オーダーアイテム</h2>
        <button type="button" id="add-item" class="btn btn-sm btn-primary">アイテム追加</button>
      </div>
      
      <div id="order-items">
        <%= form.fields_for :order_items do |item_form| %>
          <div class="order-item border rounded-lg p-4 mb-4">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
              <div class="form-control">
                <%= item_form.label :name, "アイテム名", class: "label label-text-alt" %>
                <%= item_form.text_field :name, class: "input input-bordered input-sm", required: true %>
              </div>
              
              <div class="form-control">
                <%= item_form.label :quantity, "数量", class: "label label-text-alt" %>
                <%= item_form.number_field :quantity, class: "input input-bordered input-sm", min: 1, required: true %>
              </div>
              
              <div class="form-control">
                <%= item_form.label :unit_price, "単価 (¥)", class: "label label-text-alt" %>
                <%= item_form.number_field :unit_price, class: "input input-bordered input-sm", min: 0, step: 0.01, required: true %>
              </div>
              
              <div class="form-control">
                <label class="label label-text-alt">アクション</label>
                <% if item_form.object.persisted? %>
                  <%= item_form.check_box :_destroy, class: "hidden" %>
                  <button type="button" class="btn btn-sm btn-error remove-item" data-action="mark-destroy">削除</button>
                <% else %>
                  <button type="button" class="btn btn-sm btn-error remove-item">削除</button>
                <% end %>
              </div>
            </div>
          </div>
        <% end %>
      </div>
    </div>
  </div>

  <!-- 送信ボタン -->
  <div class="flex justify-end space-x-4">
    <%= link_to "キャンセル", orders_path, class: "btn btn-outline" %>
    <%= form.submit button_text, class: "btn btn-primary" %>
  </div>
<% end %>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Order items management
  const addItemButton = document.getElementById('add-item');
  const orderItemsContainer = document.getElementById('order-items');
  let itemIndex = document.querySelectorAll('.order-item').length;

  addItemButton.addEventListener('click', function() {
    const newItem = `
      <div class="order-item border rounded-lg p-4 mb-4">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div class="form-control">
            <label class="label label-text-alt">アイテム名</label>
            <input type="text" name="order[order_items_attributes][${itemIndex}][name]" class="input input-bordered input-sm" required>
          </div>
          
          <div class="form-control">
            <label class="label label-text-alt">数量</label>
            <input type="number" name="order[order_items_attributes][${itemIndex}][quantity]" class="input input-bordered input-sm" min="1" required>
          </div>
          
          <div class="form-control">
            <label class="label label-text-alt">単価 (¥)</label>
            <input type="number" name="order[order_items_attributes][${itemIndex}][unit_price]" class="input input-bordered input-sm" min="0" step="0.01" required>
          </div>
          
          <div class="form-control">
            <label class="label label-text-alt">アクション</label>
            <button type="button" class="btn btn-sm btn-error remove-item">削除</button>
          </div>
        </div>
      </div>
    `;
    orderItemsContainer.insertAdjacentHTML('beforeend', newItem);
    itemIndex++;
  });

  orderItemsContainer.addEventListener('click', function(e) {
    if (e.target.classList.contains('remove-item')) {
      const orderItem = e.target.closest('.order-item');
      if (e.target.dataset.action === 'mark-destroy') {
        // For existing items, mark for destruction
        const destroyCheckbox = orderItem.querySelector('input[name*="_destroy"]');
        if (destroyCheckbox) {
          destroyCheckbox.checked = true;
          orderItem.style.display = 'none';
        }
      } else {
        // For new items, just remove from DOM
        orderItem.remove();
      }
    }
  });

  // URL management
  const addUrlButton = document.getElementById('add-url');
  const urlFieldsContainer = document.getElementById('url-fields');

  addUrlButton.addEventListener('click', function() {
    const newUrlField = `
      <div class="url-field flex gap-2 mb-2">
        <input type="text" name="order[attachment_urls][]" class="input input-bordered flex-1" placeholder="https://example.com/document">
        <button type="button" class="btn btn-error btn-sm remove-url">削除</button>
      </div>
    `;
    urlFieldsContainer.insertAdjacentHTML('beforeend', newUrlField);
  });

  urlFieldsContainer.addEventListener('click', function(e) {
    if (e.target.classList.contains('remove-url')) {
      e.target.closest('.url-field').remove();
    }
  });

  // File upload with drag and drop
  const dropZone = document.getElementById('drop-zone');
  const fileInput = document.getElementById('file-input');
  const newFilesPreview = document.getElementById('new-files-preview');
  let selectedFiles = [];

  // Check if elements exist
  if (!dropZone || !fileInput || !newFilesPreview) {
    console.error('Drag and drop elements not found');
    return;
  }

  // Prevent default drag behaviors on the entire document
  ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
    document.addEventListener(eventName, preventDefaults, false);
  });

  function preventDefaults(e) {
    e.preventDefault();
    e.stopPropagation();
  }

  // Drag and drop event listeners
  dropZone.addEventListener('dragenter', handleDragEnter);
  dropZone.addEventListener('dragover', handleDragOver);
  dropZone.addEventListener('dragleave', handleDragLeave);
  dropZone.addEventListener('drop', handleDrop);

  function handleDragEnter(e) {
    e.preventDefault();
    e.stopPropagation();
    console.log('Drag enter');
    dropZone.classList.add('border-blue-400', 'bg-blue-50');
    dropZone.classList.remove('border-gray-300');
  }

  function handleDragOver(e) {
    e.preventDefault();
    e.stopPropagation();
    console.log('Drag over');
    dropZone.classList.add('border-blue-400', 'bg-blue-50');
    dropZone.classList.remove('border-gray-300');
  }

  function handleDragLeave(e) {
    e.preventDefault();
    e.stopPropagation();
    console.log('Drag leave');
    if (!dropZone.contains(e.relatedTarget)) {
      dropZone.classList.remove('border-blue-400', 'bg-blue-50');
      dropZone.classList.add('border-gray-300');
    }
  }

  function handleDrop(e) {
    e.preventDefault();
    e.stopPropagation();
    console.log('Drop event triggered');
    
    dropZone.classList.remove('border-blue-400', 'bg-blue-50');
    dropZone.classList.add('border-gray-300');
    
    const files = e.dataTransfer.files;
    console.log('Files dropped:', files.length);
    
    if (files.length > 0) {
      handleFiles(files);
    }
  }

  // Click to select files
  dropZone.addEventListener('click', function(e) {
    // Don't trigger if clicking on buttons or inputs
    if (e.target.tagName === 'BUTTON' || e.target.tagName === 'INPUT') {
      return;
    }
    fileInput.click();
  });

  // File input change
  fileInput.addEventListener('change', function(e) {
    console.log('File input changed:', e.target.files.length);
    // For file input changes, replace the selection (don't add to existing)
    selectedFiles = Array.from(e.target.files);
    displayFiles();
    updateFileMetadata();
  });

  function handleFiles(files) {
    if (!files || files.length === 0) {
      return;
    }
    
    // Convert FileList to Array and add to existing files
    const newFiles = Array.from(files);
    console.log('Adding files:', newFiles.map(f => f.name));
    
    // Add new files to existing selection (don't replace)
    selectedFiles = [...selectedFiles, ...newFiles];
    
    displayFiles();
    updateFileInput();
  }
  
  function updateFileInput() {
    // Create a new FileList-like object for the input
    const dataTransfer = new DataTransfer();
    selectedFiles.forEach(file => dataTransfer.items.add(file));
    fileInput.files = dataTransfer.files;
    
    // Update hidden field with file metadata
    updateFileMetadata();
  }
  
  function updateFileMetadata() {
    const metadata = {};
    selectedFiles.forEach((file, index) => {
      if (file.customName && file.customName !== file.name) {
        metadata[file.name] = file.customName;
      }
    });
    
    // Remove existing metadata field if any
    const existingField = document.getElementById('file-metadata-field');
    if (existingField) {
      existingField.remove();
    }
    
    // Add hidden field with metadata
    if (Object.keys(metadata).length > 0) {
      const metadataField = document.createElement('input');
      metadataField.type = 'hidden';
      metadataField.id = 'file-metadata-field';
      metadataField.name = 'order[file_metadata]';
      metadataField.value = JSON.stringify(metadata);
      dropZone.appendChild(metadataField);
    }
  }

  function displayFiles() {
    newFilesPreview.innerHTML = '';
    
    if (selectedFiles.length > 0) {
      const header = document.createElement('p');
      header.className = 'text-sm font-medium text-gray-700 mb-2';
      header.textContent = '新しいファイル:';
      newFilesPreview.appendChild(header);
      
      selectedFiles.forEach((file, index) => {
        const fileDiv = document.createElement('div');
        fileDiv.className = 'new-file p-3 bg-blue-50 rounded mb-2';
        
        const topRow = document.createElement('div');
        topRow.className = 'flex items-center justify-between mb-2';
        
        const fileInfo = document.createElement('div');
        fileInfo.className = 'flex items-center space-x-2 flex-1';
        
        const icon = document.createElement('div');
        icon.innerHTML = getFileIcon(file.type);
        
        const fileNameInput = document.createElement('input');
        fileNameInput.type = 'text';
        fileNameInput.value = file.customName || file.name;
        fileNameInput.className = 'input input-bordered input-sm flex-1 mx-2';
        fileNameInput.placeholder = 'ファイル名';
        fileNameInput.onchange = function(e) {
          file.customName = e.target.value;
          updateFileMetadata();
        };
        
        const fileSize = document.createElement('span');
        fileSize.className = 'text-xs text-gray-500 whitespace-nowrap';
        fileSize.textContent = formatFileSize(file.size);
        
        const removeBtn = document.createElement('button');
        removeBtn.type = 'button';
        removeBtn.className = 'btn btn-xs btn-error ml-2';
        removeBtn.textContent = '削除';
        removeBtn.onclick = function() {
          removeFile(index);
        };
        
        fileInfo.appendChild(icon);
        fileInfo.appendChild(fileNameInput);
        fileInfo.appendChild(fileSize);
        
        topRow.appendChild(fileInfo);
        topRow.appendChild(removeBtn);
        
        const originalName = document.createElement('div');
        originalName.className = 'text-xs text-gray-500 ml-7';
        originalName.textContent = '元のファイル名: ' + file.name;
        
        fileDiv.appendChild(topRow);
        fileDiv.appendChild(originalName);
        
        newFilesPreview.appendChild(fileDiv);
      });
    }
  }

  function removeFile(index) {
    selectedFiles.splice(index, 1);
    displayFiles();
    updateFileInput();
  }

  function getFileIcon(type) {
    if (type.includes('pdf')) {
      return '<svg class="w-5 h-5 text-red-500" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd" /></svg>';
    } else if (type.includes('sheet') || type.includes('excel')) {
      return '<svg class="w-5 h-5 text-green-500" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M6 2a2 2 0 00-2 2v12a2 2 0 002 2h8a2 2 0 002-2V7.414A2 2 0 0015.414 6L12 2.586A2 2 0 0010.586 2H6zm5 6a1 1 0 10-2 0v3.586l-1.293-1.293a1 1 0 10-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L11 11.586V8z" clip-rule="evenodd" /></svg>';
    } else if (type.includes('image')) {
      return '<svg class="w-5 h-5 text-purple-500" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd" /></svg>';
    } else {
      return '<svg class="w-5 h-5 text-gray-400" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" /></svg>';
    }
  }

  function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }
});
</script>